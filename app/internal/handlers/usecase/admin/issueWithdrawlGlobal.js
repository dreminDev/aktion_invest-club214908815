const { dbGlobal } = require("../../../domain/user/storage/mongo/managers/dbGlobalManagers");
const { handleError } = require("../../../../error/customError");
const { Utils } = require("../../../../pkg/utils/utils");


module.exports = async (msg) => {
    try {
        const userId = msg.userId || msg.senderId;

        const admin = await dbUser.getAdmins();

        if (!admin.includes(userId)) {
            return;
        };

        const { globalBalanceWithdrawal } = await dbGlobal.get({
            _id: 0, 
            globalBalanceWithdrawal: 1,
        });

        const utilsGlobalBalanceWithdrawal = Utils.formateNumberAddition(globalBalanceWithdrawal);

        const answerAmount = await msg.question(
            `üí∞ –í–≤–µ–¥–∏—Ç–µ - –Ω–∞ —Å–∫–æ–ª—å–∫–æ ‚ÇΩ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤—ã–≤–æ–¥.\n\nüí≥ –°–µ–π—á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–≤–µ—Å—Ç–∏: ${utilsGlobalBalanceWithdrawal}`
        );

        const amount = Number(answerAmount.text);

        if (!amount) {
            throw new Error("not validation amount");
        };

        Promise.all([
            dbGlobal.incWithdrawalBalance(amount),
            msg.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ, –≤—ã–≤–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount}‚ÇΩ`),
        ]);

    } catch (error) {
        handleError(error, msg);
    }
};