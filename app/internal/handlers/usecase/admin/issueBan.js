const { dbUser } = require("../../../domain/user/storage/mongo/managers/dbUserManagers");
const { vkUtils } = require("../../../adapters/vk/vkUtils");

const { handleError } = require("../../../../error/customError");



module.exports = async (msg) => {
    try {
        const userIds = msg.userId || msg.senderId;

        const admin = await dbUser.getAdmins();

        if (!admin.includes(userIds)) {
            return;
        };

        const user = await msg.question(
            "üìù –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        );

        const userId = await vkUtils.getId(user.text);

        const answer = await msg.question(
            "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É\n\n‚úÖ –ë–∞–Ω: 1\n‚ùå –†–∞–∑–±–∞–Ω: 0",
        );

        const type = Number(answer.text) ? true : false;
        const typeText = Number(answer.text) ? "–ó–ê–ë–ê–ù–ï–ù" : "–†–ê–ó–ë–ê–ù–ï–ù";

        Promise.all([
            dbUser.banType(userId, type),
            msg.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ, @id${userId} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) –±—ã–ª ${typeText}`),
        ]);

    } catch (error) {
        handleError(error, msg);
    }
};