const { dbUser } = require("../../../domain/user/storage/mongo/managers/dbUserManagers");
const { vkUtils } = require("../../../adapters/vk/vkUtils");

const { Utils } = require("../../../../pkg/utils/utils");
const { handleError } = require("../../../../error/customError");



module.exports = async (msg) => {
    try {
        const admin = await dbUser.getAdmins();

        if (!admin.includes(userId)) {
            return;
        };

        const user = await msg.question(
            "üìù –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        );

        const userId = await vkUtils.getId(user.text);

        const answerAmount = await msg.question(
            "üí∞ –û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –≤—ã–¥–∞—á–∏.",
        );

        const amount = Number(answerAmount.text);

        if (!amount) {
            throw new Error("not validation amount");
        };

        const utilsFormateAmount = Utils.formateNumberAddition(amount);

        Promise.all([
            dbUser.incUserBalance(userId, amount),
            msg.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ, @id${userId} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ ${utilsFormateAmount} –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫.`),
        ]);

    } catch (error) {
        handleError(error, msg);
    }
};